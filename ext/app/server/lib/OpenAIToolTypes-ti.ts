/**
 * This module was automatically generated by `ts-interface-builder`
 */
import * as t from "ts-interface-checker";
// tslint:disable:object-literal-key-quotes

export const Column = t.iface([], {
  "id": "string",
});

export const AddTableParams = t.iface([], {
  "table_id": "string",
  "columns": t.union(t.tuple("Column", t.rest(t.array("Column"))), "null"),
});

export const RenameTableParams = t.iface([], {
  "table_id": "string",
  "new_table_id": "string",
});

export const RemoveTableParams = t.iface([], {
  "table_id": "string",
});

export const GetTableColumnsParams = t.iface([], {
  "table_id": "string",
});

export const BaseAddColumnOptions = t.iface([], {
  "label": t.opt("string"),
  "formula": t.opt("string"),
  "description": t.opt("string"),
  "formula_type": t.opt(t.union(t.lit("regular"), t.lit("trigger"))),
  "untie_col_id_from_label": t.opt("boolean"),
  "cell_text_color": t.opt("string"),
  "cell_fill_color": t.opt("string"),
  "cell_bold": t.opt("boolean"),
  "cell_underline": t.opt("boolean"),
  "cell_italic": t.opt("boolean"),
  "cell_strikethrough": t.opt("boolean"),
  "header_text_color": t.opt("string"),
  "header_fill_color": t.opt("string"),
  "header_bold": t.opt("boolean"),
  "header_underline": t.opt("boolean"),
  "header_italic": t.opt("boolean"),
  "header_strikethrough": t.opt("boolean"),
  "conditional_formatting_rules": t.opt(t.array("unknown")),
});

export const AddAnyColumnOptions = t.iface(["BaseAddColumnOptions"], {
  "type": t.lit("Any"),
  "text_alignment": t.opt(t.union(t.lit("left"), t.lit("center"), t.lit("right"))),
  "text_wrap": t.opt("boolean"),
});

export const AddTextColumnOptions = t.iface(["BaseAddColumnOptions"], {
  "type": t.lit("Text"),
  "text_format": t.opt(t.union(t.lit("text"), t.lit("markdown"), t.lit("hyperlink"))),
  "text_alignment": t.opt(t.union(t.lit("left"), t.lit("center"), t.lit("right"))),
  "text_wrap": t.opt("boolean"),
});

export const AddNumericOrIntColumnOptions = t.iface(["BaseAddColumnOptions"], {
  "number_show_spinner": t.opt("boolean"),
  "number_format": t.opt(t.union(t.lit("text"), t.lit("currency"), t.lit("decimal"), t.lit("percent"), t.lit("scientific"))),
  "number_currency_code": t.opt(t.union("string", "null")),
  "number_minus_sign": t.opt(t.union(t.lit("minus"), t.lit("parens"))),
  "number_min_decimals": t.opt("number"),
  "number_max_decimals": t.opt("number"),
  "text_alignment": t.opt(t.union(t.lit("left"), t.lit("center"), t.lit("right"))),
  "text_wrap": t.opt("boolean"),
});

export const AddNumericColumnOptions = t.iface(["AddNumericOrIntColumnOptions"], {
  "type": t.lit("Numeric"),
});

export const AddIntColumnOptions = t.iface(["AddNumericOrIntColumnOptions"], {
  "type": t.lit("Int"),
});

export const AddBoolColumnOptions = t.iface(["BaseAddColumnOptions"], {
  "type": t.lit("Bool"),
  "toggle_format": t.opt(t.union(t.lit("text"), t.lit("checkbox"), t.lit("switch"))),
});

export const AddDateOrDateTimeColumnOptions = t.iface(["BaseAddColumnOptions"], {
  "date_format": t.opt(t.union(t.lit("YYYY-MM-DD"), t.lit("MM-DD-YYYY"), t.lit("MM/DD/YYYY"), t.lit("MM-DD-YY"), t.lit("MM/DD/YY"), t.lit("DD MMM YYYY"), t.lit("MMMM Do, YYYY"), t.lit("DD-MM-YYYY"), t.lit("custom"))),
  "date_custom_format": t.opt("string"),
  "text_alignment": t.opt(t.union(t.lit("left"), t.lit("center"), t.lit("right"))),
});

export const AddDateColumnOptions = t.iface(["AddDateOrDateTimeColumnOptions"], {
  "type": t.lit("Date"),
});

export const AddDateTimeColumnOptions = t.iface(["AddDateOrDateTimeColumnOptions"], {
  "type": t.lit("DateTime"),
  "time_format": t.opt(t.union(t.lit("h:mma"), t.lit("h:mma z"), t.lit("HH:mm"), t.lit("HH:mm z"), t.lit("HH:mm:ss"), t.lit("HH:mm:ss z"), t.lit("custom"))),
  "time_custom_format": t.opt("string"),
  "timezone": t.opt("string"),
});

export const ChoiceStyle = t.iface([], {
  "textColor": t.opt("string"),
  "fillColor": t.opt("string"),
  "fontUnderline": t.opt("boolean"),
  "fontItalic": t.opt("boolean"),
  "fontStrikethrough": t.opt("boolean"),
});

export const AddChoiceOrChoiceListColumnOptions = t.iface(["BaseAddColumnOptions"], {
  "choices": t.opt(t.array("string")),
  "choice_styles": t.opt(t.iface([], {
    [t.indexKey]: "ChoiceStyle",
  })),
  "text_alignment": t.opt(t.union(t.lit("left"), t.lit("center"), t.lit("right"))),
  "text_wrap": t.opt("boolean"),
});

export const AddChoiceColumnOptions = t.iface(["AddChoiceOrChoiceListColumnOptions"], {
  "type": t.lit("Choice"),
});

export const AddChoiceListColumnOptions = t.iface(["AddChoiceOrChoiceListColumnOptions"], {
  "type": t.lit("ChoiceList"),
});

export const AddRefOrRefListColumnOptions = t.iface(["BaseAddColumnOptions"], {
  "reference_table_id": "string",
  "text_alignment": t.opt(t.union(t.lit("left"), t.lit("center"), t.lit("right"))),
  "text_wrap": t.opt("boolean"),
});

export const AddRefColumnOptions = t.iface(["AddRefOrRefListColumnOptions"], {
  "type": t.lit("Ref"),
});

export const AddRefListColumnOptions = t.iface(["AddRefOrRefListColumnOptions"], {
  "type": t.lit("RefList"),
});

export const AddAttachmentsColumnOptions = t.iface(["BaseAddColumnOptions"], {
  "type": t.lit("Attachments"),
  "attachment_height": t.opt("number"),
});

export const AddTableColumnOptions = t.union("AddAnyColumnOptions", "AddTextColumnOptions", "AddNumericColumnOptions", "AddIntColumnOptions", "AddBoolColumnOptions", "AddDateColumnOptions", "AddDateTimeColumnOptions", "AddChoiceColumnOptions", "AddChoiceListColumnOptions", "AddRefColumnOptions", "AddRefListColumnOptions", "AddAttachmentsColumnOptions");

export const AddTableColumnParams = t.iface([], {
  "table_id": "string",
  "column_id": "string",
  "column_options": "AddTableColumnOptions",
});

export const BaseUpdateColumnOptions = t.iface(["BaseAddColumnOptions"], {
  "id": t.opt("string"),
  "formula_recalc_behavior": t.opt(t.union(t.lit("add-record"), t.lit("add-or-update-record"), t.lit("custom"), t.lit("never"))),
  "formula_recalc_col_ids": t.opt(t.array("string")),
});

export const UpdateAnyColumnOptions = t.intersection("AddAnyColumnOptions", "BaseUpdateColumnOptions");

export const UpdateTextColumnOptions = t.intersection("AddTextColumnOptions", "BaseUpdateColumnOptions");

export const UpdateNumericColumnOptions = t.intersection("AddNumericColumnOptions", "BaseUpdateColumnOptions");

export const UpdateIntColumnOptions = t.intersection("AddIntColumnOptions", "BaseUpdateColumnOptions");

export const UpdateBoolColumnOptions = t.intersection("AddBoolColumnOptions", "BaseUpdateColumnOptions");

export const UpdateDateColumnOptions = t.intersection("AddDateColumnOptions", "BaseUpdateColumnOptions");

export const UpdateDateTimeColumnOptions = t.intersection("AddDateTimeColumnOptions", "BaseUpdateColumnOptions");

export const UpdateChoiceColumnOptions = t.intersection("AddChoiceColumnOptions", "BaseUpdateColumnOptions");

export const UpdateChoiceListColumnOptions = t.intersection("AddChoiceListColumnOptions", "BaseUpdateColumnOptions");

export const UpdateRefOrRefListColumnOptions = t.iface(["BaseUpdateColumnOptions"], {
  "reference_table_id": t.opt("string"),
  "reference_show_column_id": t.opt("string"),
  "text_alignment": t.opt(t.union(t.lit("left"), t.lit("center"), t.lit("right"))),
  "text_wrap": t.opt("boolean"),
});

export const UpdateRefColumnOptions = t.iface(["UpdateRefOrRefListColumnOptions"], {
  "type": t.lit("Ref"),
});

export const UpdateRefListColumnOptions = t.iface(["UpdateRefOrRefListColumnOptions"], {
  "type": t.lit("RefList"),
});

export const UpdateAttachmentsColumnOptions = t.intersection("AddAttachmentsColumnOptions", "BaseUpdateColumnOptions");

export const UpdateTableColumnOptions = t.union("UpdateAnyColumnOptions", "UpdateTextColumnOptions", "UpdateNumericColumnOptions", "UpdateIntColumnOptions", "UpdateBoolColumnOptions", "UpdateDateColumnOptions", "UpdateDateTimeColumnOptions", "UpdateChoiceColumnOptions", "UpdateChoiceListColumnOptions", "UpdateRefColumnOptions", "UpdateRefListColumnOptions", "UpdateAttachmentsColumnOptions");

export const UpdateTableColumnParams = t.iface([], {
  "table_id": "string",
  "column_id": "string",
  "column_options": "UpdateTableColumnOptions",
});

export const RemoveTableColumnParams = t.iface([], {
  "table_id": "string",
  "column_id": "string",
});

export const UpdatePageOptions = t.iface([], {
  "name": t.opt("string"),
});

export const UpdatePageParams = t.iface([], {
  "page_id": "number",
  "page_options": "UpdatePageOptions",
});

export const RemovePageParams = t.iface([], {
  "page_id": "number",
});

export const GetPageWidgetsParams = t.iface([], {
  "page_id": "number",
});

export const BaseAddWidgetOptions = t.iface([], {
  "table_id": t.union("string", "null"),
  "group_by_column_ids": t.opt(t.tuple("string", t.rest(t.array("string")))),
});

export const AddTableWidgetOptions = t.intersection("UpdateTableWidgetOptions", "BaseAddWidgetOptions");

export const AddCardWidgetOptions = t.intersection("UpdateCardWidgetOptions", "BaseAddWidgetOptions");

export const AddCardListWidgetOptions = t.intersection("UpdateCardListWidgetOptions", "BaseAddWidgetOptions");

export const AddCustomWidgetOptions = t.intersection("UpdateCustomWidgetOptions", "BaseAddWidgetOptions");

export const AddWidgetOptions = t.union("AddTableWidgetOptions", "AddCardWidgetOptions", "AddCardListWidgetOptions", "AddCustomWidgetOptions");

export const AddPageWidgetParams = t.iface([], {
  "page_id": t.union("number", "null"),
  "widget_options": "AddWidgetOptions",
});

export const BaseUpdateWidgetOptions = t.iface([], {
  "title": t.opt("string"),
  "description": t.opt("string"),
});

export const UpdateTableWidgetOptions = t.iface(["BaseUpdateWidgetOptions"], {
  "type": t.lit("table"),
});

export const UpdateCardWidgetOptions = t.iface(["BaseUpdateWidgetOptions"], {
  "type": t.lit("card"),
});

export const UpdateCardListWidgetOptions = t.iface(["BaseUpdateWidgetOptions"], {
  "type": t.lit("card_list"),
});

export const BaseUpdateCustomWidgetOptions = t.iface(["BaseUpdateWidgetOptions"], {
  "type": t.lit("custom"),
});

export const UpdateURLCustomWidgetOptions = t.iface(["BaseUpdateCustomWidgetOptions"], {
  "custom_widget_url": "string",
});

export const UpdateRepositoryCustomWidgetOptions = t.iface(["BaseUpdateCustomWidgetOptions"], {
  "custom_widget_id": "string",
});

export const UpdateCustomWidgetOptions = t.union("UpdateURLCustomWidgetOptions", "UpdateRepositoryCustomWidgetOptions");

export const UpdateWidgetOptions = t.union("UpdateTableWidgetOptions", "UpdateCardWidgetOptions", "UpdateCardListWidgetOptions", "UpdateCustomWidgetOptions");

export const UpdatePageWidgetParams = t.iface([], {
  "widget_id": "number",
  "widget_options": "UpdateWidgetOptions",
});

export const RemovePageWidgetParams = t.iface([], {
  "widget_id": "number",
});

export const GetPageWidgetSelectByOptionsParams = t.iface([], {
  "widget_id": "number",
});

export const WidgetSelectBy = t.iface([], {
  "link_from_widget_id": "number",
  "link_from_column_id": t.union("string", "null"),
  "link_to_column_id": t.union("string", "null"),
});

export const SetPageWidgetSelectByParams = t.iface([], {
  "widget_id": "number",
  "widget_select_by": t.union("WidgetSelectBy", "null"),
});

export const QueryDocumentParams = t.iface([], {
  "query": "string",
  "args": t.union(t.array("any"), "null"),
});

export const Record = t.iface([], {
  [t.indexKey]: "CellValue",
});

export const GristObjCode = t.enumtype({
  "List": "L",
  "LookUp": "l",
  "Dict": "O",
  "DateTime": "D",
  "Date": "d",
  "Skip": "S",
  "Censored": "C",
  "Reference": "R",
  "ReferenceList": "r",
  "Exception": "E",
  "Pending": "P",
  "Unmarshallable": "U",
  "Versions": "V",
});

export const CellValue = t.union("number", "string", "boolean", "null", t.tuple("GristObjCode", t.rest(t.array("unknown"))));

export const AddRecordsParams = t.iface([], {
  "table_id": "string",
  "records": t.tuple("Record", t.rest(t.array("Record"))),
});

export const UpdateRecordsParams = t.iface([], {
  "table_id": "string",
  "record_ids": t.tuple("number", t.rest(t.array("number"))),
  "records": t.tuple("Record", t.rest(t.array("Record"))),
});

export const RemoveRecordsParams = t.iface([], {
  "table_id": "string",
  "record_ids": t.tuple("number", t.rest(t.array("number"))),
});

const exportedTypeSuite: t.ITypeSuite = {
  Column,
  AddTableParams,
  RenameTableParams,
  RemoveTableParams,
  GetTableColumnsParams,
  BaseAddColumnOptions,
  AddAnyColumnOptions,
  AddTextColumnOptions,
  AddNumericOrIntColumnOptions,
  AddNumericColumnOptions,
  AddIntColumnOptions,
  AddBoolColumnOptions,
  AddDateOrDateTimeColumnOptions,
  AddDateColumnOptions,
  AddDateTimeColumnOptions,
  ChoiceStyle,
  AddChoiceOrChoiceListColumnOptions,
  AddChoiceColumnOptions,
  AddChoiceListColumnOptions,
  AddRefOrRefListColumnOptions,
  AddRefColumnOptions,
  AddRefListColumnOptions,
  AddAttachmentsColumnOptions,
  AddTableColumnOptions,
  AddTableColumnParams,
  BaseUpdateColumnOptions,
  UpdateAnyColumnOptions,
  UpdateTextColumnOptions,
  UpdateNumericColumnOptions,
  UpdateIntColumnOptions,
  UpdateBoolColumnOptions,
  UpdateDateColumnOptions,
  UpdateDateTimeColumnOptions,
  UpdateChoiceColumnOptions,
  UpdateChoiceListColumnOptions,
  UpdateRefOrRefListColumnOptions,
  UpdateRefColumnOptions,
  UpdateRefListColumnOptions,
  UpdateAttachmentsColumnOptions,
  UpdateTableColumnOptions,
  UpdateTableColumnParams,
  RemoveTableColumnParams,
  UpdatePageOptions,
  UpdatePageParams,
  RemovePageParams,
  GetPageWidgetsParams,
  BaseAddWidgetOptions,
  AddTableWidgetOptions,
  AddCardWidgetOptions,
  AddCardListWidgetOptions,
  AddCustomWidgetOptions,
  AddWidgetOptions,
  AddPageWidgetParams,
  BaseUpdateWidgetOptions,
  UpdateTableWidgetOptions,
  UpdateCardWidgetOptions,
  UpdateCardListWidgetOptions,
  BaseUpdateCustomWidgetOptions,
  UpdateURLCustomWidgetOptions,
  UpdateRepositoryCustomWidgetOptions,
  UpdateCustomWidgetOptions,
  UpdateWidgetOptions,
  UpdatePageWidgetParams,
  RemovePageWidgetParams,
  GetPageWidgetSelectByOptionsParams,
  WidgetSelectBy,
  SetPageWidgetSelectByParams,
  QueryDocumentParams,
  Record,
  GristObjCode,
  CellValue,
  AddRecordsParams,
  UpdateRecordsParams,
  RemoveRecordsParams,
};
export default exportedTypeSuite;
